import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma'; // –ü—É—Ç—å –∫ Prisma –∫–ª–∏–µ–Ω—Ç—É
import * as XLSX from 'xlsx'; // üëà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º XLSX

export async function POST(req: Request) {
    const formData = await req.formData();
    const file = formData.get('file') as File | null;

    if (!file) {
        return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 400 });
    }

    const buffer = Buffer.from(await file.arrayBuffer()); // üëà –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const json = XLSX.utils.sheet_to_json(sheet);

    const products = json.map((item: any) => ({
        code: item['–ö–æ–¥'] || null,
        name: item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '',
        unit: item['–ï–¥–∏–Ω–∏—Ü–∞'] || '—à—Ç',
        price: parseFloat(item['–¶–µ–Ω–∞'] || 0),
        quantity: parseInt(item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || '0', 10),
    }));

    try {
        for (const product of products) {
            await prisma.product.create({ data: product });
        }
        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('[IMPORT PRODUCTS ERROR]', error);
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' },
            { status: 500 }
        );
    }
}
